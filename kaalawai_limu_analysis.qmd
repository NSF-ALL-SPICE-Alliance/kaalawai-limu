---
title: "kaalawai_limu_analysis"
format: html
editor: visual
---

## ![]()Lets take a look at some water temperature data collected by HOBO loggers at Kaalawai. 

## Libraries

```{r}
library(plotly)
library(tidyverse)
library(janitor)
library(here)
library(ggmap)
library(ggplot2)
library(dplyr)
library(mapgl)
library(gganimate)
library(sf)
```

### First lets read in our data. 

This data was collected by student within Chaminades School of Natural Sciences and Mathematics. Within this data temperature, salinity, turbidity, and depth were calculated. In this visualization we will just be looking at temperature.

```{r}
kaalawai_data <- read_csv("limu_master.csv")
```

Lets clean the name columns.

```{r}
kaalawai_data <- clean_names(kaalawai_data)
```

To get an idea of what we are working with lets use the skimr function.

```{r}
skim_limu <- skimr::skim(kaalawai_data)
```

It could be interesting to look at rainfall in the area so lets read in some rainfall data.

```{r}
rainfall <- read_csv("rainfall_niuvalley.csv")

```

```{r}
summary(rainfall)
```

In order to create a compelling visual representation lets use some transect data we made in Google maps to depict the research site. Lets read in the transect data and create a SF object that will help us combine the temperature data.

```{r}
transect_data <- read_csv("Kaalawai-base1.csv")   # create a data frame from the transects made in google maps
```

```{r}
# Load transect data from your CSV
transects <- read_csv(here("Kaalawai-base1.csv"))

# Create an sf object for the transects
transects_sf <- st_as_sf(transects, wkt = "WKT", crs = 4326)

# Inspect the sf object
print(transects_sf)


```

Now we are going to join the transect data with the temperature data.

```{r}
library(dplyr)

# Create a 'name' column in kaalawai_data based on 'transect'
kaalawai_data <- kaalawai_data %>%
  mutate(name = case_when(
    str_starts(transect, "1") ~ "Transect 1",
    str_starts(transect, "2") ~ "Transect 2",
    str_starts(transect, "3") ~ "Transect 3",
    str_starts(transect, "4") ~ "Transect 4",
    str_starts(transect, "5") ~ "Transect 5",
    TRUE ~ NA_character_  # Handle cases where transect is NA or unexpected
  ))

# Perform the join with transects_sf
kaalawai_joined <- kaalawai_data %>%
  inner_join(transects_sf, by = "name")

# View the result
head(kaalawai_joined)

```

```{r}
class(kaalawai_joined) # looking at what was the result of the class object in this data frame
```

```{r}
kaalawai_joined_sf <- st_sf(kaalawai_joined, crs = 4326)  #
```

Lets generate the map and combine the transect data onto the map.

```{r}
lon <- -157.7966    #create a lat and lon target
lat <- 21.257

register_google("AIzaSyAVNo8B0Quo97QVBIzsIIJh6rQ0vu1J6k4", write = TRUE)  #register the google API key

# Get the satellite map
basemap <- get_map(location = c(lon = lon, lat = lat), zoom = 19, source = "google", maptype = "satellite")
ggmap(basemap)
```

Lets change the dates to be uniform throughout the data.

```{r}
kaalawai_joined_sf <- kaalawai_joined_sf %>%
  mutate(date_time = ymd(date_time))  #change the date to fit the data
```

```{r}
kaalawai_joined_sf$temperature_a_c_732880 <- as.numeric(kaalawai_joined_sf$temperature_a_c_732880)

#

```

Lets create a data frame p

```{r}
p <- ggmap(basemap) +
  geom_sf(data = kaalawai_joined_sf, aes(fill = temperature_a_c_732880), color = "black", alpha = 0.5) +
  scale_fill_viridis_c() +
  labs(title = 'Temperature over time', subtitle = 'Date: {frame_time}', fill = "Temperature (Â°C)") +
  theme_minimal()

#created a static plot for the data to be applied to
```

```{r}
p_anim <- p +
  transition_time(date_time) +
  ease_aes('linear') +
  shadow_mark()
#add animation
```

```{r}
animate(p_anim, nframes = 10, fps = 1) #create animation for the temperature frames
```
